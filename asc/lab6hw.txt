;3. Se da un sir de octeti S. Sa se construiasca sirul D astfel:
;sa se puna mai intai elementele de pe pozitiile pare din S iar apoi
;elementele de pe pozitiile impare din S.
;Exemplu:
;S: 1, 2, 3, 4, 5, 6, 7, 8
;D: 1, 3, 5, 7, 2, 4, 6, 8
data segment
	s db 1, 2, 3, 4, 5, 6, 7, 8, 9
	lens dw $ - s
	d db $ - 2 - s dup (?) ; aloc memorie pentru lens octeti, astfel incat
						   ; in d si in s o sa am acelas numar de octeti
						   ; $ - 2 este exact valoarea lui lens (adica offsetul)
data ends
assume cs: code, ds: data
code segment
start:
	mov ax, data
	mov ds, ax

	mov di, 0; cu indexul di ma plimb prin d (sirul destinatie)
	mov si, 0; cu indexul si ma plimb prin s (sirul sursa)
	repeat:
		mov al, s[si]
		mov d[di], al; pun in d pe pozitia di byte-ul din s[si]
		inc di
		add si, 2; prin sirul sursa s, me duc din 2 in 2, adica iau doar
				 ; elementele de pe pozitii pare/impare (depinde cat este
				 ; si initial)
		cmp si, lens
		jl repeat; daca am ajuns la sfarsitul lui s, ies din bucla
	cmp di, lens
	jge finish; daca am ajuns la sfarsit in sirul d, se termina programul
	mov si, 1
	jmp repeat; daca nu am ajuns la sfarsit in sirul d, mai trebuie sa pun
			  ; si elementele de pe pozitii impare din s in d, de aceea setez
			  ; si la 1

finish:
	mov ax, 4c00h
	int 21h
code ends
end start
